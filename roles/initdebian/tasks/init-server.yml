- hosts: base
  become: yes
  vars:
    user: kube
    tmzone: Asia/Tehran
    my_client_ip: 192.168.43.145
    f2b_findtime: 1h
    f2b_bantime: 1h
    f2b_maxretry: 3
    ssh_port: 22
    inventory_hostname_short: kmaster
    inventory_hostname: kmaster

    f2b_jail_local: |
      [DEFAULT]
      ignoreip = 127.0.0.1/8 ::1 {{ my_client_ip }}
      findtime = 1h
      bantime = 2h
      maxretry = 3

      [sshd]
      enabled = true
      port = {{ ssh_port }}

  tasks: 
    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      apt: update_cache=yes force_apt_get=yes

    - name: Ensure that these software packages are installed
      apt:
        pkg: 
          - vim
          - fail2ban
          - unzip

    # Host Setup
    - name: Set static hostname
      hostname:
        name: "{{ inventory_hostname_short }}"

    - name: Add FQDN to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: '127.0.1.1 {{ inventory_hostname }} {{ inventory_hostname_short }}'
        state: present

    - name: Set Timezone
      timezone:
        name: "{{ tmzone }}"

    - name: Create/update regular user with sudo privileges
      user:
        name: "{{ user }}"
        password: "{{ user_passwd | password_hash('sha512') }}"
        state: present
        groups: sudo
        append: true
        shell: /bin/bash

    - name: Ensure authorized keys for remote user is installed
      authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ ssh_pub_key }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
      notify:
        - restart sshd

    - name: Enable color_prompt
      lineinfile:
        path: /root/.bashrc
        state: present
        regexp: '^#force_color_prompt=yes'
        line: 'force_color_prompt=yes'

    - name: Set default color in bash
      lineinfile:
        path: /root/.bashrc
        regexp: '^PS1='
        line: 'PS1="${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "'
        backup: yes

    - name: configure fail2ban for ssh
      copy:
        dest: /etc/fail2ban/jail.local
        content: "{{ f2b_jail_local }}"
        owner: root
        group: root
        mode: 0644
      notify:
        - restart fail2ban

    - name: Configure static networking
      copy:
        src: kmaster-netplan.yml
        dest: /etc/netplan/00-installer-config.yaml
        owner: root
        group: root
        mode: 0644
      notify:
        - netplan apply
      when: cfg_static_network == true

    - name: Check if a reboot is needed for Debian-based systems
      stat:
        path: /var/run/reboot-required
      register: reboot_required


    - name: Reboot the server if needed
      reboot:
        msg: "Reboot initiated by Ansible because of reboot required file."
        connect_timeout: 5
        reboot_timeout: 60
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami
      when: reboot_required.stat.exists

    - name: Remove dependencies that are no longer needed
      apt:
        autoremove: yes
        purge: yes

    - name: Check if a reboot is needed for Debian-based systems
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: add shecan dns to resolv.conf
      lineinfile:
        path: /etc/resolv.conf
        state: present
        regexp: '^nameserver'
        line: 'nameserver 178.22.122.100'
 

  handlers:
    - name: restart sshd
      service:
        name: sshd
        state: restarted
      when: reboot_required.stat.exists == false

    - name: restart fail2ban
      service:
        name: fail2ban
        state: restarted
      when: reboot_required.stat.exists == false

    - name: restart systemd-resolved
      service:
        name: systemd-resolved
        state: restarted
      when: reboot_required.stat.exists == false

    - name: netplan apply
      command: netplan apply
      when: cfg_static_network == true 

     

