---
# tasks file for initdebian
- name: Update apt sources.list
  copy:
    src: sources.list
    dest: /etc/apt/sources.list

- name: Update apt repo and cache
  apt: 
    update_cache: yes
    force_apt_get: yes

- name: Ensure that these software packages are installed
  apt:
    pkg: "{{ packages }}"


- name: Set static hostname
  hostname:
    name: "{{ inventory_hostname_short }}"

- name: Add FQDN to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: '127.0.1.1 {{ inventory_hostname }} {{ inventory_hostname_short }}'
    state: present

- name: Set Timezone
  timezone:
    name: "{{ tmzone }}"

- name: Enable color_prompt
  lineinfile:
    path: /root/.bashrc
    state: present
    regexp: '^#force_color_prompt=yes'
    line: 'force_color_prompt=yes'

- name: Set default color in bash
  lineinfile:
    path: /root/.bashrc
    regexp: '^PS1='
    line: 'PS1="${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "'
    backup: yes

- name: Configure fail2ban
  copy:
    dest: /etc/fail2ban/jail.local
    content: "{{ f2b_jail_local }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart fail2ban

- name: Find cron files and directories
  find:
    paths:
      - /etc
    patterns:
      - cron.hourly
      - cron.daily
      - cron.weekly
      - cron.monthly
      - cron.d
      - crontab
    file_type: any
  register: cron_directories

- name: Ensure permissions on cron files and directories are configured
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: root
    group: root
    mode: og-rwx
  with_items: "{{ cron_directories.files }}"

- name: Check if a reboot is needed for Debian-based systems
  stat:
    path: /var/run/reboot-required
  register: reboot_required

- name: Remove dependencies that are no longer needed
  apt:
    autoremove: yes
    purge: yes

- name: Reboot the server if needed
  reboot:
    msg: "Reboot initiated by Ansible because of reboot required file."
    connect_timeout: 5
    reboot_timeout: 60
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: reboot_required.stat.exists

